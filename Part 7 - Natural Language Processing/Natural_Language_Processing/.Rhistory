purchasedata$dateCreated<-as.character(purchasedata$dateCreated)
purchasedata$idUser<-as.character(purchasedata$idUser)
clickdata4<-sqldf("select idUser||dateCreated as sessionid,idOffer from purchasedata where idUser>0 group by idUser,dateCreated")
View(clickdata4)
value<-rep(1,length(clickdata4$sessionid))
clickdata4$value<-value
remove(value)
remove(purchasedata)
gc()
my_matrix <- acast(clickdata4, sessionid~idOffer,value.var="value", fill = 0,sparse=TRUE)
memory.limit()
memory.limit(size=4000)
my_matrix <- acast(clickdata4, sessionid~idOffer,value.var="value", fill = 0,sparse=TRUE)
UIMatrix <- sparseMatrix(i = clickdata4$sessionid,j = clickdata4$idOffer,x = clickdata4$value)
class(clickdata4$sessionid)
class(clickdata4$idOffer)
class(clickdata4$value)
UIMatrix <- sparseMatrix(i = as.numeric(clickdata4$sessionid),j = as.numeric(clickdata4$idOffer),x = clickdata4$value)
my_matrix <- acast(clickdata4[1:2000,], sessionid~idOffer,value.var="value", fill = 0,sparse=TRUE)
View(my_matrix)
my_matrix <- acast(clickdata4[1:20000,], sessionid~idOffer,value.var="value", fill = 0,sparse=TRUE)
my_matrix <- acast(clickdata4[1:20000,], sessionid~idOffer,value.var="value", fill = 0,sparse=TRUE)
my_matrix <- acast(clickdata4[1:10000,], sessionid~idOffer,value.var="value", fill = 0,sparse=TRUE)
sparsem1<-Marix(my_matrix,sparse=TRUE)
sparsem1<-Matrix(my_matrix,sparse=TRUE)
my_matrix <- acast(clickdata4[10000:20000,], sessionid~idOffer,value.var="value", fill = 0,sparse=TRUE)
sparsem2<-Matrix(my_matrix,sparse=TRUE)
Aa <- do.call(sparseMatrix, clickdata4))
Aa <- do.call(sparseMatrix, clickdata4)
Aa <- do.call(sparseMatrix, acast(clickdata, sessionid~idOffer,value.var="value", fill = 0,sparse=TRUE))
Aa <- do.call(sparseMatrix, acast(clickdata4, sessionid~idOffer,value.var="value", fill = 0,sparse=TRUE))
with(clickdata4, sparseMatrix(i = as.numeric(sessionid), j=as.numeric(idOffer), x=value,dimnames=list(levels(sessionid), levels(idOffer))))
dene<-with(clickdata4, sparseMatrix(i = as.numeric(sessionid), j=as.numeric(idOffer), x=value,dimnames=list(levels(sessionid), levels(idOffer))))
dene<-with(clickdata4, sparseMatrix(i = suppressWarnings(as.numeric(sessionid)), j=suppressWarnings(as.numeric(idOffer)), x=value,dimnames=list(levels(sessionid), levels(idOffer))))
clickdata4$idOffer<-as.numeric(clickdata4$idOffer)
clickdata4$sessionid<-as.numeric(clickdata4$sessionid)
View(clickdata4)
purchasedata<-dbGetQuery(con,"select idOffer,idUser,dateCreated from rival_zlavy_hash ")
clickdata4<-sqldf("select idUser||dateCreated as sessionid,idOffer from purchasedata where idUser>0 group by idUser,dateCreated")
View(clickdata4)
purchasedata$dateCreated<-as.Date(purchasedata$dateCreated)
purchasedata$dateCreated<-as.character(purchasedata$dateCreated)
purchasedata$idUser<-as.character(purchasedata$idUser)
clickdata4<-sqldf("select idUser||dateCreated as sessionid,idOffer from purchasedata where idUser>0 group by idUser,dateCreated")
value<-rep(1,length(clickdata4$sessionid))
clickdata4$value<-value
View(clickdata4)
clickdata4$sessionid<-gsub("-", "", clickdata4$sessionid)
View(clickdata4)
class(clickdata4$sessionid)
clickdata5<-as.numeric(clickdata4$sessionid)
unique(clickdata5)
clickdata4<-as.numeric(clickdata4$sessionid)
purchasedata$dateCreated<-as.Date(purchasedata$dateCreated)
purchasedata$dateCreated<-as.character(purchasedata$dateCreated)
purchasedata$idUser<-as.character(purchasedata$idUser)
clickdata4<-sqldf("select idUser||dateCreated as sessionid,idOffer from purchasedata where idUser>0 group by idUser,dateCreated")
value<-rep(1,length(clickdata4$sessionid))
clickdata4$value<-value
clickdata4$sessionid<-gsub("-", "", clickdata4$sessionid)
clickdata4$sessionid<-as.numeric(clickdata4$sessionid)
class(clickdata4$idOffer)
class(clickdata4$sessionid)
class(clickdata4$value)
clickdata4$idOffer<-as.numeric(clickdata4$idOffer)
View(clickdata4)
UIMatrix <- sparseMatrix(i = clickdata4$sessionid,j = clickdata4$idOffer,x = clickdata4$value)
clickdata4$sessionid<-as.integer(clickdata4$sessionid)
View(clickdata4)
purchasedata$dateCreated<-as.Date(purchasedata$dateCreated)
purchasedata$dateCreated<-as.character(purchasedata$dateCreated)
purchasedata$idUser<-as.character(purchasedata$idUser)
clickdata4<-sqldf("select idUser||dateCreated as sessionid,idOffer from purchasedata where idUser>0 group by idUser,dateCreated")
value<-rep(1,length(clickdata4$sessionid))
clickdata4$value<-value
clickdata4$sessionid<-gsub("-", "", clickdata4$sessionid)
x<-factor(clickdata4$sessionid)
x
levels(x)
View(clickdata4)
purchasedata<-dbGetQuery(con,"select idOffer,idUser,dateCreated from rival_zlavy_hash ")
View(purchasedata)
clickdata4<-sqldf("select idUser||dateCreated as sessionid,idOffer from purchasedata where idUser>0 group by idUser,dateCreated")
View(clickdata4)
purchasedata$dateCreated<-as.Date(purchasedata$dateCreated)
purchasedata$dateCreated<-as.character(purchasedata$dateCreated)
purchasedata$idUser<-as.character(purchasedata$idUser)
clickdata4<-sqldf("select idUser||dateCreated as sessionid,idOffer from purchasedata where idUser>0 group by idUser,dateCreated")
value<-rep(1,length(clickdata4$sessionid))
clickdata4$value<-value
clickdata4$sessionid<-gsub("-", "", clickdata4$sessionid)
View(clickdata4)
class(clickdata4$sessionid)
as.integer(clickdata4$sessionid)
as.numeric(clickdata4$sessionid)
data.sparse <-sparseMatrix(as.numeric(clickdata6$sessionid), as.numeric(clickdata6$idOffer),x=clickdata6$value)
data.sparse <-sparseMatrix(as.numeric(clickdata4$sessionid), as.numeric(clickdata4$idOffer),x=clickdata4$value)
n<-length(unique(purchasedata$idOffer))
n2<-length(clickdata4$sessionid)
M <- Matrix(0, n, n2)
M[ with( clickdata4, cbind(sessionid,idOffer) ) ] <- clickdata4$value
M[ with( clickdata4, cbind(as.numeric(sessionid),idOffer) ) ] <- clickdata4$value
M
M <- Matrix(0, n2, n)
M[ with( clickdata4, cbind(as.numeric(sessionid),idOffer) ) ] <- clickdata4$value
M[1,1]
sparsem1[1,1000]
sparsem1[1,100]
sparsem1[]
rm(M)
rm(my_matrix)
rm(clickdata5)
rm(n)
rm(n2)
rm(x)
gc()
View(clickdata4)
df3 <- transform(clickdata4, id=match(sessionid, unique(sessionid)))
View(df3)
unique(clickdata4$id)
as.integer(clickdata4$id)
as.integer(clickdata4$id)
View(clickdata4)
View(df3$id)
as.integer(df3$id)
df3 <- transform(clickdata4, id=match(sessionid, unique(sessionid)))
View(df3)
data.sparse <-sparseMatrix(as.integer(df3$id), clickdata4$idOffer,x=clickdata4$value)
data.sparse[1,]
View(df3)
data.sparse[1,1118428]
getCosine <- function(x,y)
{
this.cosine <- sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y)))
return(this.cosine)
}
remove(clickdata4)
remove(df3)
remove(sparsem1)
remove(sparsem2)
remove(value)
remove(purchasedata)
gc()
offersimilarity  <- matrix(NA, nrow=ncol(data.sparse),ncol=ncol(data.sparse),
dimnames=list(colnames(data.sparse),colnames(data.sparse)))
ncol(data.sparse)
nrow(data.sparse)
purchasedata$dateCreated<-as.Date(purchasedata$dateCreated)
purchasedata$dateCreated<-as.character(purchasedata$dateCreated)
purchasedata$idUser<-as.character(purchasedata$idUser)
clickdata4<-sqldf("select idUser||dateCreated as sessionid,idOffer from purchasedata where idUser>0 group by idUser,dateCreated")
value<-rep(1,length(clickdata4$sessionid))
clickdata4$value<-value
clickdata4$sessionid<-gsub("-", "", clickdata4$sessionid)
purchasedata<-dbGetQuery(con,"select idOffer,idUser,dateCreated from rival_zlavy_hash ")
rm(data.sparse)
gc()
purchasedata$dateCreated<-as.Date(purchasedata$dateCreated)
purchasedata$dateCreated<-as.character(purchasedata$dateCreated)
purchasedata$idUser<-as.character(purchasedata$idUser)
clickdata4<-sqldf("select idUser||dateCreated as sessionid,idOffer from purchasedata where idUser>0 group by idUser,dateCreated")
value<-rep(1,length(clickdata4$sessionid))
clickdata4$value<-value
clickdata4$sessionid<-gsub("-", "", clickdata4$sessionid)
df3 <- transform(clickdata4, id=match(sessionid, unique(sessionid)))
View(df3)
data.sparse <-sparseMatrix(as.integer(df3$id), df3$idOffer,x=df3$value)
ncol(data.sparse)
unique(df3$id)
length(unique(df3$id))
length(unique(clickdata4$sessionid))
length(purchasedata$idUser)
length(unique(df3$idOffer))
data.sparse <-sparseMatrix(as.integer(df3$id), as.integer(df3$idOffer),x=df3$value)
ncol(data.sparse)
UIMatrix <- sparseMatrix(i = df3$id,
j = df3$idOffer,
x = df3$value)
ncol(UIMatrix)
df4<-df3[1:200,]
View(df4)
my_matrix <- acast(df4, id~idOffer,value.var="value", fill = 0,sparse=TRUE)
View(my_matrix)
UIMatrix2 <- sparseMatrix(i = df4$id,j = df4$idOffer,x = df4$value)
ncol(UIMatrix2)
nrow(UIMatrix2)
ncol(my_matrix)
df5<-df4
df5$id<-as.integer(df5$id)
View(df5)
ncol(!unique(clickdata4$sessionid))
ncol(unique(clickdata4$sessionid))
!unique(clickdata4$sessionid)
unique(clickdata4$sessionid)
length(unique(clickdata4$sessionid))
length(clickdata4$sessionid)
clickdata5<-sqldf("select idUser||dateCreated as sessionid,idOffer from purchasedata where idUser>0")
View(clickdata4)
View(clickdata5)
value<-rep(1,length(clickdata5$sessionid))
clickdata5$value<-value
clickdata5$sessionid<-gsub("-", "", clickdata5$sessionid)
df3 <- transform(clickdata5, id=match(sessionid, unique(sessionid)))
UIMatrix <- sparseMatrix(i = df3$id,j = df3idOffer,x = df3$value)
UIMatrix <- sparseMatrix(i = df3$id,j = df3$idOffer,x = df3$value)
ncol(UIMatrix)
unique(df3$id)
length(unique(df3$id))
View(clickdata5)
View(purchasedata)
X <- with(df3, sparseMatrix(i=as.numeric(id), j=as.numeric(idOffer), x=as.numeric(value),dimnames=list(levels(id), levels(idOffer))))
X <- with(clickdata5, sparseMatrix(i=as.numeric(sessionid), j=as.numeric(idOffer), x=as.numeric(value),dimnames=list(levels(sessionid), levels(idOffer))))
y <- with(clickdata5, sparseMatrix(i=as.numeric(sessionid), j=as.numeric(idOffer), x=as.numeric(value),dimnames=list(levels(sessionid), levels(idOffer))))
y <- with(clickdata5, sparseMatrix(i=as.numeric(factor(sessionid)), j=as.numeric(idOffer), x=as.numeric(value),dimnames=list(levels(sessionid), levels(idOffer))))
y <- with(clickdata5, sparseMatrix(i=as.numeric(factor(sessionid)), j=as.numeric(factor(idOffer)), x=as.numeric(value),dimnames=list(levels(sessionid), levels(idOffer))))
View(purchasedata)
ornek<-data.frame(c(1,2,3),c(12,13,14),c(1,1,1))
ornek
class(ornek$c.1..2..3.)
UIMatrix <- sparseMatrix(i = ornek$c.1..2..3.,j = ornek$c.12..13..14.,x = ornek$c.1..1..1.)
ncol(UIMatrix)
UIMatrix
UIMatrix <- sparseMatrix(i = ornek$c.1..2..3.,j = ornek$c.12..13..14.,x = ornek$c.1..1..1.,dims = length(j))
UIMatrix <- sparseMatrix(i = ornek$c.1..2..3.,j = ornek$c.12..13..14.,x = ornek$c.1..1..1.,dims = length(ornek$c.12..13..14.))
UIMatrix$dim
UIMatrix$13
UserID<-c(10090,10090,10090,10316,10316)
MovieID <-c(63155,63530,63544,63155,63545)
Rating <-c(2,2,1,2,1)
trainingData<-data.frame(UserID,MovieID,Rating)
trainingData
dim(UIMatrix)
UIMatrix3 <- sparseMatrix(i = trainingData$UserID,
j = trainingData$MovieID,
x = trainingData$Rating)
dim(UIMatrix3)
ncol(UIMatrix3)
UIMatrix4 <- sparseMatrix(i = as.integer(as.factor(trainingData$UserID)),
j = as.integer(as.factor(trainingData$MovieID)),
x = trainingData$Rating)
dim(UIMatrix4)
dimnames(UIMatrix) <- list(sort(unique(trainingData$UserID)),
sort(unique(trainingData$MovieID)))
dimnames(UIMatrix4) <- list(sort(unique(trainingData$UserID)),
sort(unique(trainingData$MovieID)))
UIMatrix4
View(clickdata5)
remove(df3)
remove(df4)
remove(df5)
remove(ornek)
remove(data.sparse)
remove(UIMatrix)
remove(UIMatrix2)
remove(UIMatrix3)
------------------------------------------------
UIMatrix4 <- sparseMatrix(i = as.integer(as.factor(clickdata5$sessionid)),
j = as.integer(as.factor(clickdata5$idOffer)),
x = clickdata5$value)
------------------------------------------------
UIMatrix4 <- sparseMatrix(i = as.integer(as.factor(clickdata5$sessionid)),j = as.integer(as.factor(clickdata5$idOffer)),x = clickdata5$value)
------------------------------------------------
UIMatrix4<-sparseMatrix(i = as.integer(as.factor(clickdata5$sessionid)),j = as.integer(as.factor(clickdata5$idOffer)),x = clickdata5$value)
UIMatrix4<-sparseMatrix(i = as.integer(as.factor(clickdata5$sessionid)),j = as.integer(as.factor(clickdata5$idOffer)),x = clickdata5$value)
ncol(UIMatrix4)
nrow(UIMatrix4)
dimnames(UIMatrix4)
View(clickdata5)
UIMatrix4[226940220170319,1075636]
UIMatrix4["226940220170319,"1075636"]
UIMatrix4["226940220170319","1075636"]
UIMatrix4['226940220170319','1075636']
UIMatrix4[226940220170319,1075636]
dimnames(UIMatrix4) <- list(sort(unique(clickdata5$sessionid)),sort(unique(clickdata5$idOffer)))
UIMatrix4[226940220170319,1075636]
UIMatrix4['226940220170319','1075636']
UIMatrix4['1242205620170319','1113470']
str(UIMatrix4)
head(UIMatrix4)
UIMatrix4[1,2]
colnames(UIMatrix4)
rownames(UIMatrix4)
UIMatrix4["1277078020170319",]
UIMatrix4["1277078020170319","1095196"]
UIMatrix4["1237117520170319","1019515"]
UserID<-c(10090,10090,10090,10316,10316)
MovieID <-c(63155,63530,63544,63155,63545)
Rating <-c(2,2,1,2,1)
trainingData<-data.frame(UserID,MovieID,Rating)
trainingData
UIMatrix4 <- sparseMatrix(i = as.integer(as.factor(trainingData$UserID)),
j = as.integer(as.factor(trainingData$MovieID)),
x = trainingData$Rating)
UIMatrix4
length(unique(clickdata5$idOffer))
UIMatrix4<-sparseMatrix(i = as.integer(as.factor(clickdata5$sessionid)),j = as.integer(as.factor(clickdata5$idOffer)),x = clickdata5$value)
UIMatrix4
UIMatrix4[1,2]
UIMatrix4[1,1]
UIMatrix4[1,3]
View(clickdata5)
UIMatrix4[226940220170319,]
UIMatrix4["226940220170319",]
UIMatrix4['226940220170319',]
row.names(UIMatrix4)
dimnames(UIMatrix4) <- list(sort(unique(clickdata5$sessionid)),sort(unique(clickdata5$idOffer)))
row.names(UIMatrix4)
xdene<-UIMatrix4[1:500,]
dfx<-as.data.frame(as.matrix(xdene))
View(dfx)
ncol(dfx)
dfx["226940220170319","1075636"]
dfx[226940220170319,1075636]
clickdata5[sessionid==1015001020170409]
newdata <- clickdata5[ which(clickdata5$sessionid=='1015001020170409' , ]
newdata <- clickdata5[ which(clickdata5$sessionid=="1015001020170409" , ]
newdata <- clickdata5[ which(clickdata5$sessionid=="1015001020170409"  ]
newdata <- clickdata5[ which(clickdata5$sessionid=="1015001020170409"), ]
View(newdata)
dfx[1015001020170409,1111705]
dfx["1015001020170409","1111705"]
newdata <- clickdata5[ which(clickdata5$sessionid=="102118420170319"), ]
View(newdata)
dfx["102118420170319","1111453"]
UIMatrix4<-sparseMatrix(i = as.integer(as.factor(clickdata5$sessionid)),j = as.integer(as.factor(clickdata5$idOffer)),x = clickdata5$value,use.last.ij=TRUE)
dimnames(UIMatrix4) <- list(sort(unique(clickdata5$sessionid)),sort(unique(clickdata5$idOffer)))
UIMatrix4["226940220170319","1075636"]
UIMatrix4["1233672620170319","1075636"]
ncol(UIMatrix4)
offersimilarity  <- matrix(NA, nrow=ncol(UIMatrix4),ncol=ncol(UIMatrix4),
dimnames=list(colnames(UIMatrix4),colnames(UIMatrix4)))
n<-ncol(UIMatrix4)
for(i in 1:n) {
# Loop through the columns for each column
for(j in 1:n) {
# Fill in placeholder with cosine similarities
offersimilarity[i,j] <- getCosine(as.matrix(UIMatrix4[,i]),as.matrix(UIMatrix4[,j]))
}
}
n<-ncol(UIMatrix4)
for(i in 1:n) {
# Loop through the columns for each column
for(j in 1:n) {
# Fill in placeholder with cosine similarities
offersimilarity[i,j] <- getCosine(as.matrix(UIMatrix4[,i]),as.matrix(UIMatrix4[,j]))
}
}
View(offersimilarity)
memory.limit()
memory.limit(size=3000)
memory.limit()
remove(offersimilarity)
remove(trainingData)
remove(i,j)
remove(Rating)
remove(X)
remove(xdene)
remove(y)
remove(value)
remove(newdata)
remove(dfx)
remove(MovieID)
remove(UserID)
remove(clickdata4)
gc()
offersimilarity  <- matrix(NA, nrow=ncol(UIMatrix4),ncol=ncol(UIMatrix4),
dimnames=list(colnames(UIMatrix4),colnames(UIMatrix4)))
n<-ncol(UIMatrix4)
for(i in 1:n) {
# Loop through the columns for each column
for(j in 1:n) {
# Fill in placeholder with cosine similarities
offersimilarity[i,j] <- getCosine(as.matrix(UIMatrix4[,i]),as.matrix(UIMatrix4[,j]))
}
}
n<-ncol(UIMatrix4)
for(i in 1:n) {
# Loop through the columns for each column
for(j in 1:n) {
# Fill in placeholder with cosine similarities
offersimilarity[i,j] <- getCosine(as.matrix(UIMatrix4[,i]),as.matrix(UIMatrix4[,j]))
}
}
remove(offersimilarity)
remove(purchasedata)
remove(con,i,j,n)
remove(clickdata5)
remove(my_matrix)
gc()
memory.limit()
memory.limit(size=4000)
gc()
n<-ncol(UIMatrix4)
for(i in 1:n) {
# Loop through the columns for each column
for(j in 1:n) {
# Fill in placeholder with cosine similarities
offersimilarity[i,j] <- getCosine(as.matrix(UIMatrix4[,i]),as.matrix(UIMatrix4[,j]))
}
}
offersimilarity  <- matrix(NA, nrow=ncol(UIMatrix4),ncol=ncol(UIMatrix4),
dimnames=list(colnames(UIMatrix4),colnames(UIMatrix4)))
n<-ncol(UIMatrix4)
for(i in 1:n) {
# Loop through the columns for each column
for(j in 1:n) {
# Fill in placeholder with cosine similarities
offersimilarity[i,j] <- getCosine(as.matrix(UIMatrix4[,i]),as.matrix(UIMatrix4[,j]))
}
}
n<-ncol(UIMatrix4)
for(i in 1:n) {
# Loop through the columns for each column
for(j in 1:n) {
# Fill in placeholder with cosine similarities
offersimilarity[i,j] <- getCosine(as.matrix(UIMatrix4[,i]),as.matrix(UIMatrix4[,j]))
}
}
offersimilarity[1:10,1:10]
offersimilarity <- as.data.frame(offersimilarity)
offerneighbours <- matrix(NA, nrow=ncol(offersimilarity),ncol=21,dimnames=list(colnames(offersimilarity)))
for(i in 1:ncol(clickdata1))
{
offerneighbours[i,] <- (t(head(n=21,rownames(offersimilarity[order(offersimilarity[,i],decreasing=TRUE),][i]))))
}
for(i in 1:8825)
{
offerneighbours[i,] <- (t(head(n=21,rownames(offersimilarity[order(offersimilarity[,i],decreasing=TRUE),][i]))))
}
remove(offersimilarity,UIMatrix4)
gc()
View(offerneighbours)
1+1
rm(list=ls())
gc()
# install.packages("RMySQL")
# install.packages("splitstackshape")
#Load Splitstackshape package
library(splitstackshape)
#Load RMysSQL Package
library(RMySQL)
#Load SQLdf package
library(sqldf)
options(sqldf.driver = "SQLite") # as per FAQ #7 force SQLite
options(gsubfn.engine = "R")
dbDisconnect(con)
#Create new database connection
con<-dbConnect(MySQL(), user='abdullah', password='abdullah123', host='192.168.1.11',dbname='odpadnes_sk')
purchasedata<-dbGetQuery(con,"select idOffer,idUser,dateCreated from rival_zlavy_hash ")
range(purchasedata$dateCreated)
purchasedata$dateCreated<-as.Date(purchasedata$dateCreated)
purchasedata$dateCreated[1:5,]
purchasedata[1:5,]
purchasedata1<-subset(purchasedata, dateCreated > "2017-05-26")
View(purchasedata1)
View(purchasedata)
purchasedata<-dbGetQuery(con,"select idOffer,idUser,dateCreated from rival_zlavy_hash ")
View(purchasedata)
purchasedata<-dbGetQuery(con,"select * from rival_zlavy_hash ")
View(purchasedata)
purchasedata<-dbGetQuery(con,"select * from rival_zlavy_hash where dateCreated between 2017-04-01 AND 2017-05-01")
dbDisconnect(con)
#Create new database connection
con<-dbConnect(MySQL(), user='abdullah', password='abdullah123', host='192.168.1.11',dbname='odpadnes_sk')
purchasedata<-dbGetQuery(con,"select * from rival_zlavy_hash ")
purchasedata$dateCreated<-as.Date(purchasedata$dateCreated)
purchasedata1<-subset(purchasedata, dateCreated > "2017-04-01" & dateCreated< "2017-05-01")
dbListFields(con,"rival_zlavy_hash")
purchasedata1<-subset(purchasedata, dateCreated > "2017-04-01" & dateCreated< "2017-05-01",select=c(idUser,idOffer,dateCreated))
View(purchasedata1)
purchasedata1<-subset(purchasedata, dateCreated > "2017-04-01" & dateCreated< "2017-05-01"&idUser>0,select=c(idUser,idOffer,dateCreated))
purchasedata1$dateCreated<-as.character(purchasedata1$dateCreated)
purchasedata1$idUser<-as.character(purchasedata1$idUser)
clickdata<-sqldf("select idUser||dateCreated as sessionid,idOffer from purchasedata where idUser>0 group by idUser,dateCreated")
options(sqldf.driver = "SQLite") # as per FAQ #7 force SQLite
options(gsubfn.engine = "R")
clickdata<-sqldf("select idUser||dateCreated as sessionid,idOffer from purchasedata where idUser>0 group by idUser,dateCreated")
value<-rep(1,length(clickdata$sessionid))
clickdata$value<-value
clickdata$sessionid<-gsub("-", "", clickdata5$sessionid)
clickdata$sessionid<-gsub("-", "", clickdata$sessionid)
UIMatrix4<-sparseMatrix(i = as.integer(as.factor(clickdata$sessionid)),j = as.integer(as.factor(clickdata$idOffer)),x = clickdata$value,use.last.ij=TRUE)
dimnames(UIMatrix4) <- list(sort(unique(clickdata$sessionid)),sort(unique(clickdata$idOffer)))
#Load Matrix package
library(Matrix)
UIMatrix4<-sparseMatrix(i = as.integer(as.factor(clickdata$sessionid)),j = as.integer(as.factor(clickdata$idOffer)),x = clickdata$value,use.last.ij=TRUE)
dimnames(UIMatrix4) <- list(sort(unique(clickdata$sessionid)),sort(unique(clickdata$idOffer)))
# Create a helper function to calculate the cosine between two vectors
getCosine <- function(x,y)
{
this.cosine <- sum(x*y) / (sqrt(sum(x*x)) * sqrt(sum(y*y)))
return(this.cosine)
}
remove(purchasedata,purchasedata1,value,clickdata)
gc()
offersimilarity  <- matrix(NA, nrow=ncol(UIMatrix4),ncol=ncol(UIMatrix4),
dimnames=list(colnames(UIMatrix4),colnames(UIMatrix4)))
n<-ncol(UIMatrix4)
for(i in 1:n) {
# Loop through the columns for each column
for(j in 1:n) {
# Fill in placeholder with cosine similarities
offersimilarity[i,j] <- getCosine(as.matrix(UIMatrix4[,i]),as.matrix(UIMatrix4[,j]))
}
}
View(offersimilarity)
rm(list=ls())
gc()
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
setwd("C:/Users/TEST/Desktop/Udemy-machine learning/Machine Learning A-Z Template Folder/Part 7 - Natural Language Processing/Natural_Language_Processing")
dataset_original = read.delim('Restaurant_Reviews.tsv', quote = '', stringsAsFactors = FALSE)
View(dataset_original)
